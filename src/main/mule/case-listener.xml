<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:anypoint-mq="http://www.mulesoft.org/schema/mule/anypoint-mq" xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns:salesforce="http://www.mulesoft.org/schema/mule/salesforce" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:apikit="http://www.mulesoft.org/schema/mule/mule-apikit" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:json-logger="http://www.mulesoft.org/schema/mule/json-logger" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd http://www.mulesoft.org/schema/mule/mule-apikit http://www.mulesoft.org/schema/mule/mule-apikit/current/mule-apikit.xsd  http://www.mulesoft.org/schema/mule/json-logger http://www.mulesoft.org/schema/mule/json-logger/current/mule-json-logger.xsd http://www.mulesoft.org/schema/mule/salesforce http://www.mulesoft.org/schema/mule/salesforce/current/mule-salesforce.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/anypoint-mq http://www.mulesoft.org/schema/mule/anypoint-mq/current/mule-anypoint-mq.xsd">
    <flow name="case-listener_create-case" initialState="started">
		<anypoint-mq:subscriber doc:name="subscriber-create-case-amq" doc:id="ec31e519-168e-4be6-b3ca-2e1459392af3" config-ref="Anypoint_MQ_Config" acknowledgementMode="MANUAL" destination="${anypoint-mq.case-queue-name}" acknowledgementTimeout="${anypoint-mq.ackTimeout}" outputMimeType="application/json" acknowledgementTimeoutUnit="SECONDS">
			<anypoint-mq:subscriber-type >
				<anypoint-mq:polling fetchSize="${anypoint-mq.fetchSize}">
					<scheduling-strategy >
						<fixed-frequency frequency="${anypoint-mq.frequency}"/>
					</scheduling-strategy>
				</anypoint-mq:polling>
			</anypoint-mq:subscriber-type>
		</anypoint-mq:subscriber>
    <try doc:name="Try-case-creation-errors" doc:id="3e36b22c-7531-4ed6-aea2-2ffd59ae4031" >
			<set-variable value="#[attributes.ackToken]" doc:name="set-ack-token-var" doc:id="fe8d84bc-c17f-4d12-aee0-1b783307e4c4" variableName="ackId" />
			<set-variable value="#[message.attributes.properties.correlationId]" doc:name="set-correlation-var" doc:id="213d5193-ebd8-4c7d-8b15-0e3c9c5ee60c" variableName="correlation" />
			<flow-ref doc:name="case_case-create" doc:id="d62156b0-e968-4a1c-af39-47011b1f1c0e" name="case_case-create" />
			<choice doc:name="Choice" doc:id="50a39225-056d-40be-9bde-05b7c6dc986d" >
				<when expression="#[vars.httpStatus != null]">
					<logger level="ERROR" doc:name="Logger" doc:id="4069c3e6-3257-4a38-bc1c-2f4524adb630" message="Exception"/>
				    <until-successful maxRetries="${retry.amq.numRetries}" doc:name="retry amq Nack" doc:id="49f55867-29fc-4a8b-aa87-bb36b8ae8092" millisBetweenRetries="${retry.amq.delayMillisecs}">
						<anypoint-mq:nack doc:name="Nack token" doc:id="601777ba-545a-4684-8e13-b07073dd0b71" config-ref="Anypoint_MQ_Config" ackToken="#[vars.ackId]" />

					</until-successful>
				</when>
				<otherwise >
					<until-successful maxRetries="${retry.amq.numRetries}" doc:name="retry amq Ack" doc:id="d4a44d06-7819-4089-b844-e8c01d0023c2" millisBetweenRetries="${retry.amq.delayMillisecs}">
						<anypoint-mq:ack doc:name="ack token" doc:id="684909d0-71c4-433d-9656-8b2cb4ee3553" config-ref="Anypoint_MQ_Config" ackToken="#[vars.ackId]" />

			</until-successful>
				
</otherwise>
			</choice>
			<error-handler >
				<on-error-propagate enableNotifications="true" logException="true" doc:name="On Error Propagate Any Error" doc:id="c4b7bba4-48f8-4bd1-b2c9-8a016f118a2e" >
					<logger level="ERROR" doc:name="Error Publish" doc:id="6e026675-cefb-4851-9bfd-980fc576bbb5" message="${application-msgs.local-exception-handler-message}"/>
					<until-successful maxRetries="${retry.amq.numRetries}" doc:name="retry amq Nack" doc:id="cc6e18bb-dae1-4a12-b33b-98a9eac024fd" millisBetweenRetries="${retry.amq.delayMillisecs}">
						<anypoint-mq:nack doc:name="Nack token" doc:id="6ba2c22a-14bf-477d-976f-bef7d968bc3a" config-ref="Anypoint_MQ_Config" ackToken="#[vars.ackId]" />
					</until-successful>
					<raise-error doc:name="raise error for ANY" doc:id="03bbab94-d024-44ff-983b-4ec67fd65e74" type="ANY" description="${application-msgs.local-exception-handler-message}"/>
				</on-error-propagate>
			</error-handler>
		</try>
		<error-handler >
			<on-error-continue enableNotifications="true" logException="true" doc:name="On Error Continue" doc:id="790e3097-479f-4943-81e9-2d3dd9a2f1f4" >
				<logger level="INFO" doc:name="Logger" doc:id="36e01926-f5f4-49a7-b20e-b32d31c7f311" message='#[""]'/>
			</on-error-continue>
		</error-handler>
    </flow>
	<flow name="case-listener_update-sfdc-jira" initialState="started">
		<anypoint-mq:subscriber doc:name="subscriber-update-jira-case-amq" doc:id="e2ebc66b-8fae-4518-b886-5ad2144aae51" config-ref="Anypoint_MQ_Config" acknowledgementMode="MANUAL" destination="${anypoint-mq.case-update-jira-queue-name}" acknowledgementTimeout="${anypoint-mq.ackTimeout}" outputMimeType="application/json" acknowledgementTimeoutUnit="SECONDS">
			<anypoint-mq:subscriber-type >
				<anypoint-mq:polling fetchSize="${anypoint-mq.fetchSize}">
					<scheduling-strategy >
						<fixed-frequency frequency="${anypoint-mq.frequency}"/>
					</scheduling-strategy>
				</anypoint-mq:polling>
			</anypoint-mq:subscriber-type>
		</anypoint-mq:subscriber>
    <try doc:name="Try-case-update-errors" doc:id="0b294e2f-5cb1-4719-91e6-469a4102a8cf" >
			<set-variable value="#[attributes.ackToken]" doc:name="set-ack-token-var" doc:id="1a7b43c9-4d65-4b1a-9592-ec1dc758b3b4" variableName="ackId" />
			<set-variable value="#[message.attributes.properties.correlationId]" doc:name="set-correlation-var" doc:id="b78034b4-adcc-4021-b607-9b253bbbb198" variableName="correlation" />
			<flow-ref doc:name="jira-issue_jira-issue" doc:id="ed030640-7ca7-4369-9083-cd60b4c51d6c" name="jira-issue_jira-issue"/>
			<flow-ref doc:name="case_case-update-sf" doc:id="8ecd962e-48e0-4466-adc1-bc0677ddf055" name="case_case-update-sf" />
			<choice doc:name="Choice" doc:id="33d84fab-e902-45f2-97a2-5ce975b6f692" >
				<when expression="#[vars.httpStatus != null]">
					<logger level="ERROR" doc:name="Logger" doc:id="cf19747f-270e-42f4-b701-f47dd9dd485b" message="Exception"/>
				    <until-successful maxRetries="${retry.amq.numRetries}" doc:name="retry amq Nack" doc:id="b75a96a8-31a0-464d-8f62-02a5f4f7dc8f" millisBetweenRetries="${retry.amq.delayMillisecs}">
						<anypoint-mq:nack doc:name="Nack token" doc:id="d14eda34-f9e9-46c1-b627-5059919081bc" config-ref="Anypoint_MQ_Config" ackToken="#[vars.ackId]" />
					</until-successful>
				</when>
				<otherwise >
					<until-successful maxRetries="${retry.amq.numRetries}" doc:name="retry amq Ack" doc:id="f8350ce9-72d7-45e2-9142-1aa943f1e822" millisBetweenRetries="${retry.amq.delayMillisecs}">
				<anypoint-mq:ack doc:name="ack token" doc:id="c1d03828-632d-4752-8ef7-5c6b0a26f54a" config-ref="Anypoint_MQ_Config" ackToken="#[vars.ackId]" />
			</until-successful>
				</otherwise>
			</choice>
			<error-handler >
				<on-error-propagate enableNotifications="true" logException="true" doc:name="On Error Propagate Any Errors" doc:id="0c6cc3ad-d5d0-4b51-843a-3a87fc8aa637" type="ANY">
				<until-successful maxRetries="${retry.amq.numRetries}" doc:name="retry amq Nack" doc:id="bb67a53d-5082-490f-9858-d22d5923d8e2" millisBetweenRetries="${retry.amq.delayMillisecs}">
						<anypoint-mq:nack doc:name="Nack token" doc:id="d2caf579-311b-4703-b68d-c057151e5adb" config-ref="Anypoint_MQ_Config" ackToken="#[vars.ackId]" />
				</until-successful>
				<raise-error doc:name="raise error for ANY" doc:id="84f6d401-ba0a-4fd9-b465-c0748ffc75f6" type="ANY" />
			</on-error-propagate>
			</error-handler>
		</try>
		<error-handler >
			<on-error-continue enableNotifications="true" logException="true" doc:name="On Error Continue" doc:id="251c3972-b051-4d36-9a37-28b73b4284a9" >
				<logger level="INFO" doc:name="Logger" doc:id="297317dc-7a00-4f53-beae-6bb7d7d3b260" message='#[""]'/>
			</on-error-continue>
		</error-handler>
    </flow>
    <flow name="case-listener_update-sfdc-snow">
		<anypoint-mq:subscriber doc:name="subscriber-update-sfdc-case-amq" doc:id="c5ddd975-440a-46ff-98a0-27bb55c18356" config-ref="Anypoint_MQ_Config" acknowledgementMode="MANUAL" destination="${anypoint-mq.case-update-queue-name}" acknowledgementTimeout="${anypoint-mq.ackTimeout}" outputMimeType="application/json" acknowledgementTimeoutUnit="SECONDS">
			<anypoint-mq:subscriber-type >
				<anypoint-mq:polling fetchSize="${anypoint-mq.fetchSize}">
					<scheduling-strategy >
						<fixed-frequency frequency="${anypoint-mq.frequency}"/>
					</scheduling-strategy>
				</anypoint-mq:polling>
			</anypoint-mq:subscriber-type>
		</anypoint-mq:subscriber>
    <try doc:name="Try-case-update-errors" doc:id="0bd9010c-c9b4-4f97-9f78-fbb2030488f5" >
			<set-variable value="#[attributes.ackToken]" doc:name="set-ack-token-var" doc:id="eb41990f-a0f9-4184-a102-db2842d6fb9d" variableName="ackId" />
			<set-variable value="#[message.attributes.properties.correlationId]" doc:name="set-correlation-var" doc:id="2000264b-7149-4c84-9c94-4fbd32e99a3b" variableName="correlation" />
			<flow-ref doc:name="case_case-update-sf" doc:id="5691a46a-c4e5-4c66-94b6-95ae43376e32" name="case_case-update-sf" />
			<choice doc:name="Choice" doc:id="17f50ac8-4789-4a0d-82b0-f857bdfe250f" >
				<when expression="#[vars.httpStatus != null]">
					<logger level="ERROR" doc:name="Logger" doc:id="37bdef08-dcf9-4021-8df5-1ff6d85ad999" message="Exception"/>
				    <until-successful maxRetries="${retry.amq.numRetries}" doc:name="retry amq Nack" doc:id="859b12f7-c7a0-4da7-877e-10d60f2ce5b2" millisBetweenRetries="${retry.amq.delayMillisecs}">
						<anypoint-mq:nack doc:name="Nack token" doc:id="b551a75c-2731-4a5f-8ed8-3a1d36c7d14e" config-ref="Anypoint_MQ_Config" ackToken="#[vars.ackId]" />
					</until-successful>
				</when>
				<otherwise >
					<until-successful maxRetries="${retry.amq.numRetries}" doc:name="retry amq Ack" doc:id="d7dd2311-7041-43a4-ab75-0b2c2c8bd865" millisBetweenRetries="${retry.amq.delayMillisecs}">
				<anypoint-mq:ack doc:name="ack token" doc:id="9f1d8eed-127f-4115-b3ba-7ed0643bb724" config-ref="Anypoint_MQ_Config" ackToken="#[vars.ackId]" />
			</until-successful>
				</otherwise>
			</choice>
			<error-handler >
				<on-error-propagate enableNotifications="true" logException="true" doc:name="On Error Propagate Any Errors" doc:id="db09a78a-4ef8-4ffa-9779-c058ae97bb45" type="ANY">
				<until-successful maxRetries="${retry.amq.numRetries}" doc:name="retry amq Nack" doc:id="bdc3e066-fb02-453f-aa55-66e2c16affca" millisBetweenRetries="${retry.amq.delayMillisecs}">
						<anypoint-mq:nack doc:name="Nack token" doc:id="87399f28-a540-4250-ba3c-07d6ba4e4885" config-ref="Anypoint_MQ_Config" ackToken="#[vars.ackId]" />
				</until-successful>
				<raise-error doc:name="raise error for ANY" doc:id="c93cb469-3300-4742-9183-f8f88521f609" type="ANY" />
			</on-error-propagate>
			</error-handler>
		</try>
		<error-handler >
			<on-error-continue enableNotifications="true" logException="true" doc:name="On Error Continue" doc:id="1e31b2df-a3c1-400a-b037-e9639d1c2f2a" >
				<logger level="INFO" doc:name="Logger" doc:id="c35b6b68-0701-4fdc-9bef-0416f67bbba2" message='#[""]'/>
			</on-error-continue>
		</error-handler>
    </flow>
</mule>
